*mkdx.txt*                                          Mappings for markdown syntax
*mkdx*

`Author:  Sidney Liebrand <sidneyliebrand@gmail.com>`
`Version: 0.0.5`

==============================================================================
CONTENTS                                                         *mkdx-contents*
                                                                      *mkdx-toc*
    Introduction
        Helptags
    Variables
        `g:mkdx#map_prefix`
        `g:mkdx#map_keys`
        `g:mkdx#checkbox_toggles`
        `g:mkdx#header_style`
        `g:mkdx#restore_visual`
        `g:mkdx#table_divider`
        `g:mkdx#table_header_divider`
    Mappings
        Toggle checkbox forward
        Toggle checkbox backward
        Wrap text in link
        Increment header level
        Decrement header level
        CSV to markdown table
        Toggle quote
    Functions
        mkdx#ToggleCheckbox()
        mkdx#WrapLink()
        mkdx#ToggleQuote()
        mkdx#ToggleHeader()
        mkdx#Tableize()


==============================================================================
INTRODUCTION                                                 *mkdx-introduction*

|mkdx| provides some useful mappings that will reduce the time you spend
formatting your {markdown} files. The built-in functions allow you to
toggle checkboxes and header levels, wrapping a selection in a markdown link,
quoting text and converting CSV data to a markdown table.

This is my first vim plugin and my first experience with vimL.
Therefore, this plugin will probably have some rough edges, bug reports and
feature requests are welcome at https://github.com/sidofc/mkdx/issues and PR's
are welcome at https://github.com/sidofc/mkdx/pulls.

==============================================================================
HELPTAGS                                                         *mkdx-helptags*

The helptags are split into 3 types, |mdx-vars|, |mdx-mappings| and
|mdx-functions|. These are the category tags. Within each
See |mkdx-vars| for settings, |mkdx-mappings| for keymaps and |mkdx-functions|
for functions. Below is a list of all helptags:

- |mkdx.txt|, |mkdx|
- |mkdx-contents|, |mkdx-toc|
- |mkdx-introduction|
- |mkdx-helptags|
- |mkdx-vars|
    - |mkdx-var-map-prefix|
    - |mkdx-var-map-keys|
    - |mkdx-var-checkbox-toggles|
    - |mkdx-var-header-style|
    - |mkdx-var-restore-visual|
    - |mkdx-var-table-header-divider|
    - |mkdx-var-table-divider|
- |mkdx-mappings|
    - |mkdx-mapping-toggle-checkbox-forward|
    - |mkdx-mapping-toggle-checkbox-backward|
    - |mkdx-mapping-wrap-text-in-link|
    - |mkdx-mapping-increment-header-level|
    - |mkdx-mapping-decrement-header-level|
    - |mkdx-mapping-csv-to-markdown-table|
    - |mkdx-mapping-toggle-quote|
- |mkdx-functions|
    - |mkdx-function-toggle-checkbox|
    - |mkdx-function-wrap-link|
    - |mkdx-function-toggle-quote|
    - |mkdx-function-toggle-header|
    - |mkdx-function-tableize|

==============================================================================
VARIABLES                                                            *mkdx-vars*

|mkdx| has some configurable vars that you can define. Defaults are shown
at the bottom of every setting section.

==============================================================================
`g:mkdx#map_prefix = '<leader>'`                             *mkdx-var-map-prefix*


Set the prefix used by all mappings. It is not recommended to clear the prefix
because some of the keys are already mapped to other operations.

==============================================================================
`g:mkdx#map_keys = 1`                                          *mkdx-var-map-keys*

This option allows you to control wether the plugin should map keys or not.
See the |mkdx-mappings| section to see how each mapping works.

==============================================================================
`g:mkdx#checkbox_toggles = [' ', '\\~', 'x', '\\!']`   *mkdx-var-checkbox-toggles*

This option allows you to specify different states to use for toggling
checkboxes. Special characters must be escaped! The default list contains:

    - `[ ]` inactive
    - `[~]` active
    - `[x]` completed
    - `[!]` hold


==============================================================================
`g:mkdx#header_style = '#'`                                *mkdx-var-header-style*

Header style to use when incrementing or decrementing header level.
Any character is allowed here, it will also be used when matching header lines
e.g. setting it to `@` matches `@@ Header` instead of `## Header`

==============================================================================
`g:mkdx#restore_visual = 1`                              *mkdx-var-restore-visual*

This setting controls wether or not a visual mode mapping returns to visual
mode after running the command. Setting it to 0 means you will not go back
into visual mode.

==============================================================================
`g:mkdx#table_divider = '|'`                              *mkdx-var-table-divider*

Change the default divider used in |mkdx-function-tableize|.

==============================================================================
`g:mkdx#table_header_divider = '='`                *mkdx-var-table-header-divider*

Change the default header divider used in |mkdx-function-tableize|.

==============================================================================
MAPPINGS                                                         *mkdx-mappings*

These are the default mappings set by this plugin. Both |mkdx-var-map-keys|
and |mkdx-var-map-prefix| control how they work. You can always find what a
key maps to directly below the help tag. All mappings are {<buffer>} local.

The convention `<MAP_PREFIX>` will be used in examples below to indicate the
value of `g:mkdx#map_prefix` (default: `"<leader>"`)

==============================================================================
Toggle checkbox forward                   *mkdx-mapping-toggle-checkbox-forward*
                                                                 <MAP_PREFIX>-

Toggles the next item in the `g:mkdx#checkbox_toggles` list. Wraps around to
the start if the end is reached. Works in both visual and normal mode.

    `nnoremap <MAP_PREFIX>- :call mkdx#ToggleCheckbox(1)<Cr>`
    `vnoremap <MAP_PREFIX>- :call mkdx#ToggleCheckbox(1)<Cr>`

==============================================================================
Toggle checkbox backward                 *mkdx-mapping-toggle-checkbox-backward*
                                                                 <MAP_PREFIX>=

Toggles the previous item in the |mkdx-var-checkbox-toggles| list. Wraps
around to the end if the start is reached. Works in both visual and
normal mode. This function restores visual selection if
|mkdx-var-restore-visual| is set.

    `nnoremap <MAP_PREFIX>= :call mkdx#ToggleCheckbox()<Cr>`
    `vnoremap <MAP_PREFIX>= :call mkdx#ToggleCheckbox()<Cr>`

==============================================================================
Wrap text in link                               *mkdx-mapping-wrap-text-in-link*
                                                                <MAP_PREFIX>ln

Wrap the word under the cursor or a visual selection in an empty markdown link.
Select the word "world" in "hello world" and run the mapping, it
results in "hello [world]()". Likewise in normal mode, if you put the cursor
on the word "world" and run the mapping, it will produce the same result.
The cursor will be placed between the parentheses in |Insert-mode|.

    `nnoremap <MAP_PREFIX>ln :call mkdx#WrapLink()<Cr>`
    `vnoremap <MAP_PREFIX>ln :call mkdx#WrapLink('v')<Cr>`

==============================================================================
Increment header level                     *mkdx-mapping-increment-header-level*
                                                                 <MAP_PREFIX>[

Increments the header level by 1. Wraps around to h6 when promoting beyond h1.

    `nnoremap <MAP_PREFIX>[ :call mkdx#ToggleHeader(1)<Cr>`

==============================================================================
Decrement header level                     *mkdx-mapping-decrement-header-level*
                                                                 <MAP_PREFIX>]

Decrements the header level by 1. Wraps around to h1 when demoting beyond h6.

    `nnoremap <MAP_PREFIX>[ :call mkdx#ToggleHeader()<Cr>`

==============================================================================
Convert CSV to markdown table               *mkdx-mapping-csv-to-markdown-table*
                                                                 <MAP_PREFIX>,

Converts a visual selection of CSV rows to a markdown table.
See |mkdx-function-tableize| for more information.

    `vnoremap <MAP_PREFIX>, :call mkdx#Tableize()<Cr>`

==============================================================================
Toggle quote                                         *mkdx-mapping-toggle-quote*
                                                                 <MAP_PREFIX>'

Toggles a markdown quote on the current line or on every nonblank line in a
visual selection. This function restores visual selection if
|mkdx-var-restore-visual| is set.

    `nnoremap <MAP_PREFIX>' :call mkdx#ToggleQuote()<Cr>`
    `vnoremap <MAP_PREFIX>' :call mkdx#ToggleQuote()<Cr>`

==============================================================================
FUNCTIONS                                                       *mkdx-functions*

This is an overview of all the functions that |mkdx| provides.

==============================================================================
mkdx#ToggleCheckbox([, {reverse}])               *mkdx-function-toggle-checkbox*

This function works in |Normal-mode| and |Visual-mode|.
It toggles the first checkbox (`[ ]`) on the current line or every line in a
selection to the next state in |mkdx-var-checkbox-toggles|. Cycling can be
reversed by setting {increment} is 1. If {increment} is not supplied,
|Number| 0 will be used by default.

When {reverse} is 1:

    [ ] `=>` [!]

When {reverse} is 0:

    [ ] `=>` [~]

==============================================================================
mkdx#WrapLink([, {mode}])                              *mkdx-function-wrap-link*

This function works in |Normal-mode| and |Visual-mode|.
The optional {mode} parameter defines how the the text must be handled.
This function stores deleted text in a register (which is restored
afterwards), wraps it and pastes the register back at cursor position.
To delete the correct text to wrap, a mode must be supplied for any mode other
than normal. This will influence the `normal!` commands executed to delete
text. e.g. for visual mode it will do a `gv` before deleting into a register.

In normal mode, this function wraps the word under the cursor in a link.
In visual mode, it will wrap the entire visual selection in a link.

    Hello `=>` [Hello]()

==============================================================================
mkdx#ToggleQuote()                                  *mkdx-function-toggle-quote*

This function works in |Normal-mode| and |Visual-mode|. It toggles a markdown quote
on a line, if a qoute mark (`>`) is present, it will be removed, otherwise it
will be prepended.

    This is an awesome quote!   `=>` > This is an awesome quote!
    > This is an awesome quote! `=>` This is an awesome quote!

==============================================================================
mkdx#ToggleHeader([, {increment}])                 *mkdx-function-toggle-header*

This function increments or decrements the heading on the current line.
If {increment} is not supplied, |Number| 0 will be used by default.
This function wraps around both ways: h1 to h6 and h6 to h1.

When {increment} is 1:

    ## Hello    `=>` # Hello
    # Hello     `=>` ###### Hello

When {increment} is 0 (default):

    # Hello     `=>` ## Hello
    ##### Hello `=>` # Hello

==============================================================================
mkdx#Tableize()                                         *mkdx-function-tableize*


Convert a visual selection of CSV data to a markdown table.
The first nonblank line in the selection will be used as header for the table.
At the moment, alignment of columns is limited to centering only.

Visually selecting the following text:

`    Name,Age,Gender`
`    John,23,Male`
`    Catherline,44,Female`
`    Manny,22,Male`

Will produce this table:

`       Name    | Age | Gender`
`    =========================`
`       John    | 23  |  Male`
`    Catherline | 44  | Female`
`      Manny    | 22  |  Male`

vim:tw=78:sw=4:ft=help:norl:
