*mkdx.txt*                                          Mappings for markdown syntax
*mkdx*

`Author:  Sidney Liebrand <sidneyliebrand@gmail.com>`
`Version: 0.3.0`

==============================================================================
CONTENTS                                                         *mkdx-contents*
                                                                      *mkdx-toc*
    Introduction
        Helptags

    Variables
        `g:mkdx#map_prefix`
        `g:mkdx#map_keys`
        `g:mkdx#checkbox_toggles`
        `g:mkdx#checklist_update_tree`
        `g:mkdx#header_style`
        `g:mkdx#restore_visual`
        `g:mkdx#table_divider`
        `g:mkdx#table_header_divider`
        `g:mkdx#enhance_enter`
        `g:mkdx#list_tokens`
        `g:mkdx#fence_style`
        `g:mkdx#toc_text`
        `g:mkdx#toc_list_token`
        `g:mkdx#handle_malformed_indent`
        `g:mkdx#link_as_img_pat`
        `g:mkdx#italic_token`
        `g:mkdx#bold_token`
        `g:mkdx#list_token`
        `g:mkdx#checkbox_initial_state`

    Plugs
        <Plug>(mkdx-checkbox-next)
        <Plug>(mkdx-checkbox-prev)
        <Plug>(mkdx-promote-header)
        <Plug>(mkdx-demote-header)
        <Plug>(mkdx-toggle-quote)
        <Plug>(mkdx-wrap-link-n)
        <Plug>(mkdx-wrap-link-v)
        <Plug>(mkdx-tableize)
        <Plug>(mkdx-enhance-enter-i)
        <Plug>(mkdx-generate-toc)
        <Plug>(mkdx-update-toc)
        <Plug>(mkdx-gen-or-upd-toc)
        <Plug>(mkdx-text-bold-n)
        <Plug>(mkdx-text-bold-v)
        <Plug>(mkdx-text-italic-n)
        <Plug>(mkdx-text-italic-v)
        <Plug>(mkdx-text-strike-n)
        <Plug>(mkdx-text-strike-v)
        <Plug>(mkdx-text-inline-code-n)
        <Plug>(mkdx-text-inline-code-v)
        <Plug>(mkdx-toggle-checkbox)
        <Plug>(mkdx-toggle-checklist)
        <Plug>(mkdx-toggle-list)

    Mappings
        Insert fenced code block
        Insert `<kbd />` shortcut
        Toggle checkbox forward
        Toggle checkbox backward
        Wrap text in link
        Wrap text in bold
        Wrap text in italic
        Wrap text in `<strike />` tag
        Wrap text in backticks
        Increment header level
        Decrement header level
        CSV to markdown table
        Toggle quote
        List items
        Generate or update table of contents
        Toggle checkbox
        Toggle checklist
        Toggle list

    Functions
        mkdx#ToggleCheckbox()
        mkdx#WrapLink()
        mkdx#ToggleQuote()
        mkdx#ToggleHeader()
        mkdx#Tableize()
        mkdx#EnterHandler()
        mkdx#GenerateTOC()
        mkdx#UpdateTOC()
        mkdx#GenerateOrUpdateTOC()
        mkdx#ToggleCheckboxTask()
        mkdx#ToggleChecklist()
        mkdx#ToggleList()


==============================================================================
INTRODUCTION                                                 *mkdx-introduction*

mkdx.vim is a `markdown` plugin that aims to reduce the time you spend
formatting your markdown documents. It does this by adding some configurable
mappings for files with a markdown {filetype}. Functions are included to
handle lists, checkboxes, fenced code blocks, shortcuts, headers and links.
In addition to that, this plugin provides a mapping to convert a selection of
CSV data to a markdown table. See the the {README.md} for gifs :)

This plugin is also compatible with
{repeat.vim}(https://github.com/tpope/vim-repeat) by Tim Pope.
Every _normal_ mode mapping can be repeated with the `.` command.

Bug reports and feature requests are welcome at
https://github.com/sidofc/mkdx/issues and PR's are welcome at
https://github.com/sidofc/mkdx/pulls.

==============================================================================
HELPTAGS                                                         *mkdx-helptags*

The helptags are split into 3 types, |mdx-vars|, |mdx-mappings| and
|mdx-functions|. These are the category tags. Within each
See |mkdx-vars| for settings, |mkdx-mappings| for keymaps and |mkdx-functions|
for functions. Below is a list of all helptags:

- |mkdx.txt|, |mkdx|
- |mkdx-contents|, |mkdx-toc|
- |mkdx-introduction|
- |mkdx-helptags|
- |mkdx-vars|
    - |mkdx-var-map-prefix|
    - |mkdx-var-map-keys|
    - |mkdx-var-checkbox-toggles|
    - |mkdx-var-header-style|
    - |mkdx-var-restore-visual|
    - |mkdx-var-table-header-divider|
    - |mkdx-var-table-divider|
    - |mkdx-var-enhance-enter|
    - |mkdx-var-list-tokens|
    - |mkdx-var-fence-style|
    - |mkdx-var-toc-text|
    - |mkdx-var-toc-list-token|
    - |mkdx-var-handle-malformed-indent|
    - |mkdx-var-link-as-img-pat|
    - |mkdx-var-italic-token|
    - |mkdx-var-bold-token|
    - |mkdx-var-list-token|
    - |mkdx-var-checkbox-initial-state|

- |mkdx-plugs|
    - |mkdx-plug-checkbox-next|
    - |mkdx-plug-checkbox-prev|
    - |mkdx-plug-promote-header|
    - |mkdx-plug-demote-header|
    - |mkdx-plug-toggle-quote|
    - |mkdx-plug-mkdx-wrap-link-n|
    - |mkdx-plug-mkdx-wrap-link-v|
    - |mkdx-plug-mkdx-tableize|
    - |mkdx-plug-mkdx-enhance-enter-i|
    - |mkdx-plug-mkdx-generate-toc|
    - |mkdx-plug-mkdx-update-toc|
    - |mkdx-plug-mkdx-gen-or-update-toc|
    - |mkdx-plug-wrap-text-in-link-n|
    - |mkdx-plug-wrap-text-in-link-v|
    - |mkdx-plug-wrap-text-in-bold-n|
    - |mkdx-plug-wrap-text-in-bold-v|
    - |mkdx-plug-wrap-text-in-italic-n|
    - |mkdx-plug-wrap-text-in-italic-v|
    - |mkdx-plug-wrap-text-in-strike-tag-n|
    - |mkdx-plug-wrap-text-in-strike-tag-v|
    - |mkdx-plug-wrap-text-in-backticks-n|
    - |mkdx-plug-wrap-text-in-backticks-v|
    - |mkdx-plug-toggle-checkbox|
    - |mkdx-plug-toggle-checklist|
    - |mkdx-plug-toggle-list|

- |mkdx-mappings|
    - |mkdx-mapping-insert-fenced-code-block|
    - |mkdx-mapping-insert-kbd-shortcut|
    - |mkdx-mapping-toggle-checkbox-forward|
    - |mkdx-mapping-toggle-checkbox-backward|
    - |mkdx-mapping-wrap-text-in-link|
    - |mkdx-mapping-wrap-text-in-bold|
    - |mkdx-mapping-wrap-text-in-italic|
    - |mkdx-mapping-wrap-text-in-strike-tag|
    - |mkdx-mapping-wrap-text-in-backticks|
    - |mkdx-mapping-increment-header-level|
    - |mkdx-mapping-decrement-header-level|
    - |mkdx-mapping-csv-to-markdown-table|
    - |mkdx-mapping-toggle-quote|
    - |mkdx-mapping-list-items|
    - |mkdx-mapping-generate-or-update-toc|
    - |mkdx-mapping-toggle-checkbox|
    - |mkdx-mapping-toggle-checklist|
    - |mkdx-mapping-toggle-list|

- |mkdx-functions|
    - |mkdx-function-toggle-checkbox|
    - |mkdx-function-wrap-link|
    - |mkdx-function-toggle-quote|
    - |mkdx-function-toggle-header|
    - |mkdx-function-tableize|
    - |mkdx-function-enter-handler|
    - |mkdx-function-generate-toc|
    - |mkdx-function-update-toc|
    - |mkdx-function-generate-or-update-toc|
    - |mkdx-function-wrap-text|
    - |mkdx-mapping-toggle-checkbox-task|
    - |mkdx-mapping-toggle-checklist|
    - |mkdx-mapping-toggle-list|

==============================================================================
VARIABLES                                                            *mkdx-vars*

|mkdx| has some configurable vars that you can define. Defaults are shown
at the bottom of every setting section.

==============================================================================
`g:mkdx#map_prefix = '<leader>'`                             *mkdx-var-map-prefix*


Set the prefix used by all mappings. It is not recommended to clear the prefix
because some of the keys are already mapped to other operations.

==============================================================================
`g:mkdx#map_keys = 1`                                          *mkdx-var-map-keys*

This option allows you to control wether the plugin should map keys or not.
See the |mkdx-mappings| section to see how each mapping works.

==============================================================================
`g:mkdx#checkbox_toggles = [' ', '-', 'x']         `   *mkdx-var-checkbox-toggles*

This option allows you to specify different states to use for toggling
checkboxes. Special characters must be escaped! The default list contains:

    - `[ ]` inactive
    - `[-]` active
    - `[x]` completed

Note:

There must be at least a minimum of 3 checkbox states. They are used by the
checklist toggler which updates the state of parent tasks automatically.
This is done by using one state that represents inactive status
(`g:mkdx#checkbox_toggles[0]`), another one for incomplete
(`g:mkdx#checkbox_toggles[-2]`) and finally, complete
(`g:mkdx#checkbox_toggles[-1]`). This is required because it needs to work
according to user provided toggles list.

==============================================================================
`g:mkdx#checklist_update_tree = 2`                *mkdx-var-checklist-update-tree*

With this setting on, checkboxes that are toggled within checklists (lists of
checkboxes) cause parent and child list items to be updated automatically.
The states from |mkdx-var-checkbox-toggles| are used to check and update the
statusses of any parents. Children are force updated to the same token of
their parent.

To disable this behaviour entirely, set this value to 0. If you do not want
children to be updated, set this value to 1 instead.

==============================================================================
`g:mkdx#header_style = '#'`                                *mkdx-var-header-style*

Header style to use when incrementing or decrementing header level.
Any character is allowed here, it will also be used when matching header lines
e.g. setting it to `@` matches `@@ Header` instead of `## Header`

==============================================================================
`g:mkdx#restore_visual = 1`                              *mkdx-var-restore-visual*

This setting controls wether or not a visual mode mapping returns to visual
mode after running the command. Setting it to 0 means you will not go back
into visual mode.

==============================================================================
`g:mkdx#table_divider = '|'`                              *mkdx-var-table-divider*

Change the default divider used in |mkdx-function-tableize|.

==============================================================================
`g:mkdx#table_header_divider = '-'`                *mkdx-var-table-header-divider*

Change the default header divider used in |mkdx-function-tableize|.

==============================================================================
`g:mkdx#enhance_enter = 1`                                *mkdx-var-enhance-enter*

When pressing <enter> in insert mode, this handles appending of new list items
in lists. See |mkdx-var-list-tokens| for a list of supported list tokens.
Examples can be found at |mkdx-function-enter-handler|.

==============================================================================
`g:mkdx#list_tokens = ['-', '*', '>']`                      *mkdx-var-list-tokens*

This list identifies which tokens at the start of a string are identified as a
"list token". See |mkdx-function-enter-handler| for examples.

==============================================================================
`g:mkdx#fence_style = ''`                                   *mkdx-var-fence-style*

This setting allows you to override the fence style that is used when typing
three backticks or tilde characters. By default it is empty which means that
the typed key defines the fence style (so tildes are used when typing tildes,
ditto for backticks).

The fence style can be set to '~' or '`'. This will cause both tildes and
backticks to use the same style.

==============================================================================
`g:mkdx#toc_text = 'TOC'`                                      *mkdx-var-toc-text*

Define the heading text to use in the table of contents.

==============================================================================
`g:mkdx#toc_list_token = g:mkdx#list_token`              *mkdx-var-toc-list-token*

Define the list style to use when generating a table of contents. It is set to
the value of |mkdx-var-list-token| by default. This is a newer setting that
you can find below.

==============================================================================
`g:mkdx#handle_malformed_indent = 1`            *mkdx-var-handle-malformed-indent*

This setting defines behaviour to use when working with improperly indented
markdown files. At the moment it works for checklist items that do not have an
|indent()| which is divisible by 'shiftwidth'. In which case the indent will
be rounded up to the next indent if it is greater than `&sw / 2` otherwise it
will be rounded down to the previous indent.

In the following example, the second item belongs under "hello" but the
indentation is incorrect (imagine we're using a 'shiftwidth' of 4).

If the third line is toggled without `g:mkdx#handle_malformed_indent` set to
1, the malformed item will be incremented instead of the "hello" item.


    - [ ] hello
       - [-] hai     `<= should not have been updated`
         - [-] again `<= toggled`

With this setting on, the correct item will actually be checked:

    - [-] hello      `<= updated correctly`
       - [ ] hai
         - [-] again `<= toggled`

==============================================================================
`g:mkdx#link_as_img_pat = 'a\?png\|jpe\?g\|gif' `       *mkdx-var-link-as-img-pat*

Defines the extensions to search for when identifying the type of link that
|mkdx-function-wrap-link| will generate. Setting it to an empty string
disables image wrapping and a regular empty markdown link will be generated
instead.

==============================================================================
`g:mkdx#italic_token = '*'`                                *mkdx-var-italic-token*

Token used by |mkdx-plug-text-italic-n| and |mkdx-plug-text-italic-v| to wrap
text in italic style.

==============================================================================
`g:mkdx#bold_token = '**'`                                   *mkdx-var-bold-token*

Token used by |mkdx-plug-text-bold-n| and |mkdx-plug-text-bold-v| to wrap
text in bold style.

==============================================================================
`g:mkdx#list_token = '-'`                                    *mkdx-var-list-token*

This token defines what list markers should be inserted when toggling list /
checklist items. It is also used by default in |mkdx-var-toc-list-token|.

==============================================================================
`g:mkdx#checkbox_initial_state = ' '`            *mkdx-var-checkbox-initial-state*

When toggling between checkbox/checklist lines, using
|mkdx-mapping-toggle-checkbox| or |mkdx-mapping-toggle-checklist| this defines
what the default value of each inserted checkbox should be.

==============================================================================
PLUGS                                                               *mkdx-plugs*

When `g:mkdx#map_keys` is set to 0, the user can bind individual functions
through <Plug> mappings. Every normal mode <Plug> is repeatable using
{repeat.vim} by Tim Pope (https://github.com/tpope/vim-repeat).

==============================================================================
<Plug>(mkdx-checkbox-next)                             *mkdx-plug-checkbox-next*

    `:call mkdx#ToggleCheckbox()<Cr>`

==============================================================================
<Plug>(mkdx-checkbox-prev)                             *mkdx-plug-checkbox-prev*

    `:call mkdx#ToggleCheckbox(1)<Cr>`

==============================================================================
<Plug>(mkdx-promote-header)                           *mkdx-plug-promote-header*

    `:<C-U>call mkdx#ToggleHeader(1)<Cr>`

==============================================================================
<Plug>(mkdx-demote-header)                             *mkdx-plug-demote-header*

    `:<C-U>call mkdx#ToggleHeader()<Cr>`

==============================================================================
<Plug>(mkdx-toggle-quote)                               *mkdx-plug-toggle-quote*

    `:call mkdx#ToggleQuote()<Cr>`

==============================================================================
<Plug>(mkdx-wrap-link-n)                                 *mkdx-plug-wrap-link-n*

    `:call mkdx#WrapLink()<Cr>`

==============================================================================
<Plug>(mkdx-wrap-link-v)                                 *mkdx-plug-wrap-link-v*

    `:call mkdx#WrapLink('v')<Cr>`

==============================================================================
<Plug>(mkdx-tableize)                                       *mkdx-plug-tableize*

    `:call mkdx#Tableize()<Cr>`

==============================================================================
<Plug>(mkdx-enhance-enter-i)                         *mkdx-plug-enhance-enter-i*

    `:call mkdx#EnterHandler()<Cr>`

==============================================================================
<Plug>(mkdx-generate-toc)                               *mkdx-plug-generate-toc*

    `:call mkdx#GenerateTOC()<Cr>`

==============================================================================
<Plug>(mkdx-update-toc)                                   *mkdx-plug-update-toc*

    `:call mkdx#UpdateTOC()<Cr>`

==============================================================================
<Plug>(mkdx-gen-or-upd-toc-toc)                   *mkdx-plug-gen-or-upd-toc-toc*

    `:call mkdx#GenerateOrUpdateTOC()<Cr>`

==============================================================================
<Plug>(mkdx-text-bold-n)                                 *mkdx-plug-text-bold-n*

    `:<C-U>call mkdx#WrapText('n', g:mkdx#bold_token, g:mkdx#bold_token,`
                           `\ 'mkdx-text-bold-n')<Cr>`

==============================================================================
<Plug>(mkdx-text-bold-v)                                 *mkdx-plug-text-bold-v*

    `:<C-U>call mkdx#WrapText('v', g:mkdx#bold_token, g:mkdx#bold_token)<Cr>`

==============================================================================
<Plug>(mkdx-text-italic-n)                             *mkdx-plug-text-italic-n*

    `:<C-U>call mkdx#WrapText('n', g:mkdx#italic_token, g:mkdx#italic_token,`
                           `\ 'mkdx-text-italic-n')<Cr>`

==============================================================================
<Plug>(mkdx-text-italic-v)                             *mkdx-plug-text-italic-v*

    `:<C-U>call mkdx#WrapText('v', g:mkdx#italic_token,`
                           `\ g:mkdx#italic_token)<Cr>`

==============================================================================
<Plug>(mkdx-text-strike-n)                             *mkdx-plug-text-strike-n*

    `:<C-U>call mkdx#WrapText('n', '<strike>', '</strike>',`
                            `\ 'mkdx-text-strike-n')<Cr>`

==============================================================================
<Plug>(mkdx-text-strike-v)                             *mkdx-plug-text-strike-v*

    `:<C-U>call mkdx#WrapText('v', '<strike>', '</strike>')<Cr>`

==============================================================================
<Plug>(mkdx-text-inline-code-n)                   *mkdx-plug-text-inline-code-n*

    :<C-U>call mkdx#WrapText('n', '`', '`', 'mkdx-text-inline-code-n')<Cr>

==============================================================================
<Plug>(mkdx-text-inline-code-v)                   *mkdx-plug-text-inline-code-v*

    :<C-U>call mkdx#WrapText('v', '`', '`')<Cr>

==============================================================================
<Plug>(mkdx-toggle-checkbox)                         *mkdx-plug-toggle-checkbox*

    `:call mkdx#ToggleCheckboxTask()<Cr>`

==============================================================================
<Plug>(mkdx-toggle-checklist)                       *mkdx-plug-toggle-checklist*

    `:call mkdx#ToggleChecklist()<Cr>`
==============================================================================
<Plug>(mkdx-toggle-list)                                 *mkdx-plug-toggle-list*

    `:call mkdx#ToggleList()<Cr>`

==============================================================================
MAPPINGS                                                         *mkdx-mappings*

These are the default mappings set by this plugin. Both |mkdx-var-map-keys|
and |mkdx-var-map-prefix| control how they work. You can always find what a
key maps to directly below the help tag. All mappings are {<buffer>} local.

The convention `<MAP_PREFIX>` will be used in examples below to indicate the
value of `g:mkdx#map_prefix` (default: `"<leader>"`)

==============================================================================
Insert fenced code block                 *mkdx-mapping-insert-fenced-code-block*
                                                                    ~~~ or ```

This mapping works in insert mode by typing ``` or ~~~. The block will be
autocompleted and the cursor will be put at the end of the opening fence to
specify the language.

    `inoremap <buffer><silent><unique> ~~~ ~~~<Enter>~~~<C-o>k<C-o>A`

==============================================================================
Insert <kbd> shortcut                         *mkdx-mapping-insert-kbd-shortcut*
                                                                        <<Tab>

This mapping works in insert mode by inserting `<` and pressing <Tab>
afterwards. A <kbd> tag will be inserted and the cursor will be moved inside
the tag while staying in insert mode.

    `imap <buffer><silent><unique> <<Tab> <kbd></kbd><C-o>2h<C-o>cit`

==============================================================================
Toggle checkbox forward                   *mkdx-mapping-toggle-checkbox-forward*
                                                                 <MAP_PREFIX>-

Toggles the next item in the |mkdx-var-checkbox-toggles| list. Wraps
around to the start if the end is reached. Works in both visual and
normal mode. This function restores visual selection if
|mkdx-var-restore-visual| is set.

When toggling an item which is nested in a list, the parent and child list
items will be updated as well. Automatic updating of checkboxes
can be disabled setting |mkdx-var-checklist-update-tree|.

    `nmap <MAP_PREFIX>- <Plug>(mkdx-checkbox-next)`
    `vmap <MAP_PREFIX>- <Plug>(mkdx-checkbox-next)`

==============================================================================
Toggle checkbox backward                 *mkdx-mapping-toggle-checkbox-backward*
                                                                 <MAP_PREFIX>=

Toggles the previous item in the |mkdx-var-checkbox-toggles| list. Wraps
around to the end if the start is reached. Works in both visual and
normal mode. This function restores visual selection if
|mkdx-var-restore-visual| is set.

When toggling an item which is nested in a list, the parent and child list
items will be updated as well. Automatic updating of checkboxes
can be disabled setting |mkdx-var-checklist-update-tree|.

    `nmap <MAP_PREFIX>= <Plug>(mkdx-checkbox-prev)`
    `vmap <MAP_PREFIX>= <Plug>(mkdx-checkbox-prev)`

==============================================================================
Wrap text in link                               *mkdx-mapping-wrap-text-in-link*
                                                                <MAP_PREFIX>ln

Wrap the word under the cursor or a visual selection in an empty markdown link.
Select the word "world" in "hello world" and run the mapping, it
results in "hello [world]()". Likewise in normal mode, if you put the cursor
on the word "world" and run the mapping, it will produce the same result.
The cursor will be placed between the parentheses in |Insert-mode|.

    `nmap <MAP_PREFIX>ln <Plug>(mkdx-wrap-link-n)`
    `vmap <MAP_PREFIX>ln <Plug>(mkdx-wrap-link-v)`

==============================================================================
Wrap text in bold                               *mkdx-mapping-wrap-text-in-bold*

Wrap the word under the cursor or a visual selection in bold. By default
`**` is used for bolding text, this can be changed with |mkdx-var-bold-token|.

    `nmap <MAP_PREFIX>b <Plug>(mkdx-text-bold-n)`
    `vmap <MAP_PREFIX>b <Plug>(mkdx-text-bold-v)`

==============================================================================
Wrap text in italic                           *mkdx-mapping-wrap-text-in-italic*

Wrap the word under the cursor or a visual selection in italic. By default
`*` is used for italicizing text, this can be changed with |mkdx-var-italic-token|.

    `nmap <MAP_PREFIX>/ <Plug>(mkdx-text-italic-n)`
    `vmap <MAP_PREFIX>/ <Plug>(mkdx-text-italic-v)`

==============================================================================
Wrap text in strike-tag                   *mkdx-mapping-wrap-text-in-strike-tag*

Wrap the word under the cursor or a visual selection in a `<strike></strike>`
tag.

    `nmap <MAP_PREFIX>s <Plug>(mkdx-text-strike-tag-n)`
    `vmap <MAP_PREFIX>s <Plug>(mkdx-text-strike-tag-v)`

==============================================================================
Wrap text in backticks                     *mkdx-mapping-wrap-text-in-backticks*

Wrap the word under the cursor or a visual selection in backticks (e.g. as
inline code block).

    nmap <MAP_PREFIX>` <Plug>(mkdx-text-italic-n)
    vmap <MAP_PREFIX>` <Plug>(mkdx-text-italic-v)

==============================================================================
Increment header level                     *mkdx-mapping-increment-header-level*
                                                                 <MAP_PREFIX>[

Increments the header level by 1. Wraps around to h6 when promoting beyond h1.

    `nmap <MAP_PREFIX>[ <Plug>(mkdx-promote-header)`

==============================================================================
Decrement header level                     *mkdx-mapping-decrement-header-level*
                                                                 <MAP_PREFIX>]

Decrements the header level by 1. Wraps around to h1 when demoting beyond h6.

    `nmap <MAP_PREFIX>[ <Plug>(mkdx-demote-header)`

==============================================================================
Convert CSV to markdown table               *mkdx-mapping-csv-to-markdown-table*
                                                                 <MAP_PREFIX>,

Converts a visual selection of CSV rows to a markdown table.
See |mkdx-function-tableize| for more information.

    `vmap <MAP_PREFIX>, <Plug>(mkdx-tableize)`

==============================================================================
Toggle quote                                         *mkdx-mapping-toggle-quote*
                                                                 <MAP_PREFIX>'

Toggles a markdown quote on the current line or on every nonblank line in a
visual selection. This function restores visual selection if
|mkdx-var-restore-visual| is set.

    `nmap <MAP_PREFIX>' <Plug>(mkdx-toggle-quote)`
    `vmap <MAP_PREFIX>' <Plug>(mkdx-toggle-quote)`

==============================================================================
List items                                             *mkdx-mapping-list-items*
                                                                    `o` and <Cr>

When editing a list in markdown, pressing either <enter> in normal mode or `o`
in insert mode will insert a new list item below the current item. All items
following the newly added item are incremented accordingly. The following
patterns are identified as list tokens:

- Any number of spaces followed by dot separated numbers. (`'^ \+[0-9.]\+'`)
- Any token present in |mkdx-var-list-tokens|

For examples, see |mkdx-function-enter-handler|.

==============================================================================
Generate or update table of contents       *mkdx-mapping-generate-or-update-toc*
                                                                 <MAP_PREFIX>i

This function does one of two things based on wether a table of contents is
already present. If it exists, the current table of contents will be updated.
If it doesn't exist yet, a table of contents will be inserted at current line.

==============================================================================
Toggle checkbox                                   *mkdx-mapping-toggle-checkbox*
                                                                 <MAP_PREFIX>t

Toggles between a regular line and a line with a checkbox in normal and visual
mode. In normal mode, the line under the cursor will be toggled. In visual
mode, every line in the visual selection will be toggled. A default state for
the inserted checkboxes can be set with |mkdx-var-checkbox-initial-state|.

In normal mode, the current line will be toggled (each line below represents a
different example):

    `this is a line`     => `[ ] this is a line`
    `[ ] this is a line` => `this is a line`
    `[-] this is a line` => `this is a line`
    `[x] this is a line` => `this is a line`

In visual mode, the selected lines will be affected. Imagine having a visual
selection on lines 3 and 4 in the following text:

    `this is some text`
    `this is some more text`
    `this should be a task item`
    `this should also be a task item`

Pressing the mapping <MAP_PREFIX>t will turn it into this:

    `this is some text`
    `this is some more text`
    `[ ] this should be a task item`
    `[ ] this should also be a task item`

==============================================================================
Toggle checklist                                 *mkdx-mapping-toggle-checklist*
                                                                <MAP_PREFIX>lt

This one is nearly identical to |mkdx-mapping-toggle-checkbox| but instead,
this one also prepends a list token (and a space) before the checkbox which
can be set using: |mkdx-var-list-token|. The |mkdx-var-checkbox-initial-state|
variable will also be respected here.

The same example from above (each line is a different example):

    `this is a line`       => `- [ ] this is a line`
    `- [ ] this is a line` => `this is a line`
    `- [-] this is a line` => `this is a line`
    `- [x] this is a line` => `this is a line`

==============================================================================
Toggle list                                           *mkdx-mapping-toggle-list*
                                                                <MAP_PREFIX>ll

This mapping toggles between a regular line and a list item. In normal mode,
the current line is affected. In visual mode, every line in the visual
selection is affected.

In normal mode:

    `this is a line` => `- this is a line`

    `- this is a line` => `this is a line`

In visual mode:

    `this is a line`          `- this is a line`
    `this is another line` => `- this is another line`
    `blah blah more lines`    `- blah blah more lines`

    `- this is a line`          `this is a line`
    `- this is another line` => `this is another line`
    `- blah blah more lines`    `blah blah more lines`


==============================================================================
FUNCTIONS                                                       *mkdx-functions*

This is an overview of all the functions that |mkdx| provides.

==============================================================================
mkdx#ToggleCheckbox([, {reverse}])               *mkdx-function-toggle-checkbox*

This function works in |Normal-mode| and |Visual-mode|.
It toggles the first checkbox (`[ ]`) on the current line or every line in a
selection to the next state in |mkdx-var-checkbox-toggles|. Cycling can be
reversed by setting {increment} is 1. If {increment} is not supplied,
|Number| 0 will be used by default.

When {reverse} is 1:

    [ ] `=>` [x]

When {reverse} is 0:

    [ ] `=>` [-]

Parent and child checklist items are also updated accordingly. This is done by
traversing up from the item under the cursor and updating every higher level
parent depending on its children statusses. Imagine you checked the box at
`toggled` to incomplete (`-`), the following would happen:

    - [ ] item 1
    - [-] item 2             `<= update next direct parent of parent`
        - [ ] item 2.1
        - [ ] item 2.2
            - [ ] item 2.2.1
            - [ ] item 2.2.2
        - [-] item 2.3       `<= update direct parent`
            - [-] item 2.3.1 `<= toggled`
            - [ ] item 2.3.2
    - [ ] item 3

If instead, an item higher in the list was toggled:

    - [ ] item 1
    - [-] item 2                   `<= update direct parent`
        - [ ] item 2.1
        - [ ] item 2.2
            - [ ] item 2.2.1
            - [ ] item 2.2.2
        - [x] item 2.3             `<= toggled`
            - [x] item 2.3.1       `<= update child`
                - [x] item 2.3.1.1 `<= update child`
                - [x] item 2.3.1.2 `<= update child`
            - [x] item 2.3.2       `<= update child`
    - [ ] item 3

All children are always updated to the same token of the toggled item. This
behaviour can be changed or disabled with |mkdx-var-checklist-update-tree|.
If your list isn't properly updated, see |mkdx-var-handle-malformed-indent|.

==============================================================================
mkdx#WrapLink([, {mode}])                              *mkdx-function-wrap-link*

This function works in |Normal-mode| and |Visual-mode|.
The optional {mode} parameter defines how the the text must be handled.
This function stores deleted text in a register (which is restored
afterwards), wraps it and pastes the register back at cursor position.
To delete the correct text to wrap, a mode must be supplied for any mode other
than normal. This will influence the `normal!` commands executed to delete
text. e.g. for visual mode it will do a `gv` before deleting into a register.

In normal mode, this function wraps the word under the cursor in a link.
In visual mode, it will wrap the entire visual selection in a link.

    Hello `=>` [Hello]()

If a visual selection ends in an image extension (`.png` for example), an
image link will be created instead.

    nyancat.png `=>` ![nyancat.png](nyancat.png)

In this case, the cursor is placed just after the opening `(`. This allows you
to prepend a URL / path. To disable link wrapping, see:
|mkdx-var-link-as-img-pat|

==============================================================================
mkdx#ToggleQuote()                                  *mkdx-function-toggle-quote*

This function works in |Normal-mode| and |Visual-mode|. It toggles a markdown quote
on a line, if a qoute mark (`>`) is present, it will be removed, otherwise it
will be prepended.

    This is an awesome quote!   `=>` > This is an awesome quote!
    > This is an awesome quote! `=>` This is an awesome quote!

==============================================================================
mkdx#ToggleHeader([, {increment}])                 *mkdx-function-toggle-header*

This function increments or decrements the heading on the current line.
If {increment} is not supplied, |Number| 0 will be used by default.
This function wraps around both ways: h1 to h6 and h6 to h1.

When {increment} is 1:

    ## Hello    `=>` # Hello
    # Hello     `=>` ###### Hello

When {increment} is 0 (default):

    # Hello     `=>` ## Hello
    ##### Hello `=>` # Hello

==============================================================================
mkdx#Tableize()                                         *mkdx-function-tableize*

Convert a visual selection of CSV data to a markdown table.
The first nonblank line in the selection will be used as header for the table.
At the moment, alignment of columns is limited to centering only.

Visually selecting the following text:

`    Name,Age,Gender`
`    John,23,Male`
`    Catherline,44,Female`
`    Manny,22,Male`

Will produce this table:

`       Name    | Age | Gender`
`    =========================`
`       John    | 23  |  Male`
`    Catherline | 44  | Female`
`      Manny    | 22  |  Male`

==============================================================================
mkdx#EnterHandler()                                *mkdx-function-enter-handler*

This function detects when you are in a list, when pressing <enter> in insert
mode or `o` in normal mode. It will append a new list item. The following are
detected as list items:

- Any number of spaces followed by dot separated numbers. (`'^ \+[0-9.]\+'`)
- Any token present in |mkdx-var-list-tokens|

This function respects indent level when appending a new item.
When you add a new list item and press <enter> again (e.g. pressing <enter>
twice after an existing list item) the list item and any indentation will be
removed.

In {any} case, if a checkbox is encountered directly after a list token
(separated by space), the newly appended list item will contain an empty
checkbox.

    `1. [ ] list item <= <enter>`
    `2. [ ] |         <= cursor`
    `3. [ ] list item`

The requirement here is that the checkbox is properly formatted, there has to
be atleast 1 space between the list token and opening `[`. a space or ony of
the |mkdx-var-checkbox-toggles| between `[` and `]`.

If the list delimiter isn't a numeric sequence, all that happens is that a new
line will be appended at the same indent level and the delimiter and a space
appended.

    `* list item`
    `* list item <= <enter>`
    `* |         <= cursor`
    `* list item`
    `* list item`

Numeric list items also work as expected, all numbers will be incremented
correctly even in nested lists (of any depth).

    `1. list item`
    `2. list item <= <enter>`
    `3. |         <= cursor`
    `4. list item`
    `5. list item`

Nested list:

    `1. list item`
    `2. list item <= <enter>`
    `3. |         <= cursor`
    `4. list item`
        `4.1. list item`
        `4.2. list item`
    `5. list item`

Deep nested list:

    `1. list item`
    `2. list item <= <enter>`
    `3. |         <= cursor`
    `4. list item`
        `4.1. list item`
            `4.1.1. list item`
            `4.1.2. list item`
        `4.2. list item`
    `5. list item`

Deep nested list with second level enter:

    `1. list item`
    `2. list item`
    `4. list item`
        `4.2. list item <= <enter>`
        `4.2. |         <= cursor`
        `4.3. list item`
            `4.3.1. list item`
            `4.3.2. list item`
        `4.4. list item`
    `5. list item`

==============================================================================
mkdx#GenerateTOC()                                  *mkdx-function-generate-toc*

Insert a table of contents under the cursor. All headings are indented
usimg |sw| setting multiplied by their header minus one. This means that h1
tags aren't indented. The header line is customizable through
|mkdx-var-toc-text|. If |mkdx-var-header-style| is changed, this function will
use the new value accordingly.

List items are generated with a dash (-) character by default. This can be
changed with |mkdx-var-toc-list-token|.

==============================================================================
mkdx#UpdateTOC()                                      *mkdx-function-update-toc*

This function checks to see if a table of content exists in the document. If
it finds it, the toc will be removed and regenerated using
|mkdx-function-generate-toc|. If a TOC isn't found, nothing will happen.

A heading is detected using the following regular expression:

`    '^' . g:mkdx#header_style . '\{1,6} \+' . g:mkdx#toc_text`
    `'^#\{1,6} \+TOC'` <= default pattern

==============================================================================
mkdx#GenerateOrUpdateTOC()                *mkdx-function-generate-or-update-toc*

Like |mkdx-function-update-toc|, this function checks to see wether a table of
content exists. Based on the result it will either call
|mkdx-function-update-toc| if it exists, or |mkdx-function-generate-toc| if it
doesn't exist yet.

==============================================================================
mkdx#WrapText({mode}, {start}, {end}, {repeat})        *mkdx-function-wrap-text*

Wrap text in {start} and {end} delimiters.

The argument {mode} can be supplied to control what is selected.
When set to string `n`, the word under the cursor will be wrapped. When set to
`v`, the visual selection will be wrapped. If {mode} is omitted, it will
default to using `n`.

The {start} argument defines the string to use at the start of the target to
wrap. When omitted, it is set to an empty string.

The {end} argument defines the string to use at the end of the target to wrap.
When omitted, the value of {start} is used.

The final argument {repeat} can be used to enable repeat support for
repeat.vim. This requires you to setup a <Plug>(custom-plug) mapping. You
would then supply the name of your plug as value for {repeat}. In this case it
would be `custom-plug`.

Note: If you are considering to repeat a visual mode command, this will work
still but in this case it will repeat on the previously selected text.

A mapping that wraps text in '*' symbols:

    `" non repeatable`
    `nnoremap <space>b :<C-U>call mkdx#WrapText('n', '*')<Cr>`

    `" repeatable`
    `noremap <silent> <Plug>(custom-wrap)`
                    `\ :<C-U>call mkdx#WrapText('n', '*', '*', 'custom-wrap')`

    `" now map the named <Plug> mapping to an actual key combination`
    `au FileType markdown nmap <buffer> <space>b <Plug>(custom-wrap)`

A non-repeatable mapping with a different ending:

    `nnoremap <space>p :<C-U>call mkdx#WrapText('n', '<p>', '</p>')<Cr>`

==============================================================================
mkdx#ToggleCheckboxTask()                   *mkdx-function-toggle-checkbox-task*

This function will prepend a checkbox on the current line, or every line in a
visual selection. The checkbox can have a default state defined by:
|mkdx-var-checkbox-initial-state|.

==============================================================================
mkdx#ToggleChecklist()                          *mkdx-function-toggle-checklist*

Like |mkdx-function-toggle-checkbox-task|, but prepends a list token
(and a space) in addition to the checkbox on the current line, or every line in a
visual selection. The list token used is defined by |mkdx-var-list-token|.

==============================================================================
mkdx#ToggleList()                                    *mkdx-function-toggle-list*

This function will prepend a list token on the current line, or every line in
a visual selection. The token can be specified using |mkdx-var-list-token|.

vim:tw=78:sw=4:ft=help:norl:
